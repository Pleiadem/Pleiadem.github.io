<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解决 AnyDesk 999秒广告（商业用途警示与连接限制）</title>
      <link href="/posts/509947134.html"/>
      <url>/posts/509947134.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>近期AnyDesk也引入了商业用途检测机制（999秒广告）。本文旨在为被系统误判&gt;为商业用途的个人用户提供两种经过验证的解决方案，以重置Any-Desk ID并解除使用限制。</p><p>根据公开的技术文档和社区讨论，该检测机制的触发条件之一为：单一AnyDesk ID在连续八周的周期内，与超过八个不同的设备建立过连接。对于拥有多个个人设备或频繁为亲友提供技术支持的非商业用户而言，这种算法可能导致错误的判定。</p><p>本文将提供两种行之有效的技术方法，用于重置AnyDesk客户端的唯一标识符（ID），从而绕过此限制。这些方法仅建议用于解决个人非商业用途下被错误识别的问题。</p><hr><h4 id="解决方案一：清除用户配置文件以重置ID"><a href="#解决方案一：清除用户配置文件以重置ID" class="headerlink" title="解决方案一：清除用户配置文件以重置ID"></a><strong>解决方案一：清除用户配置文件以重置ID</strong></h4><p>此方法通过删除存储在用户个人配置目录下的AnyDesk数据来实现ID重置。这是一种快速且高效的策略。</p><p><strong>操作步骤：</strong></p><ol><li><p><strong>完全退出AnyDesk程序</strong><br>在执行任何操作前，必须确保AnyDesk进程已完全终止。请检查系统托盘区（屏幕右下角），右键单击AnyDesk图标并选择“退出”。如有必要，可通过任务管理器（Ctrl+Shift+Esc）确认<code>AnyDesk.exe</code>进程已不存在。</p></li><li><p><strong>定位到AppData目录</strong><br>按下 <code>Windows</code> + <code>R</code> 键打开“运行”对话框，输入以下路径变量并按回车键：<br><code>%appdata%</code><br>此命令将直接打开当前用户的 <code>AppData\Roaming</code> 目录。</p></li><li><p><strong>删除AnyDesk配置文件夹</strong><br>在打开的 <code>Roaming</code> 目录中，找到名为 <code>AnyDesk</code> 的文件夹。此文件夹包含了用户的连接历史、地址簿以及生成ID所需的配置文件。</p><p>为彻底重置，请<strong>将此 <code>AnyDesk</code> 文件夹整体删除</strong>。或者，您也可以进入该文件夹，删除其内部所有内容。</p></li><li><p><strong>验证结果</strong><br>重新启动AnyDesk应用程序。程序在首次启动时会因检测不到现有配置文件而自动生成一组新的配置，其中即包含一个新的AnyDesk ID。此时，原有的商业用途警示应已解除。</p></li></ol><hr><h4 id="解决方案二：修改系统级配置文件以重置ID（本人未实践过）"><a href="#解决方案二：修改系统级配置文件以重置ID（本人未实践过）" class="headerlink" title="解决方案二：修改系统级配置文件以重置ID（本人未实践过）"></a><strong>解决方案二：修改系统级配置文件以重置ID（本人未实践过）</strong></h4><p>此方法更为精确，通过直接编辑AnyDesk的系统级配置文件来移除ID信息，适用于希望保留部分用户设置（如地址簿）的高级用户。</p><p><strong>操作步骤：</strong></p><ol><li><p><strong>定位到ProgramData目录</strong><br>按下 <code>Windows</code> + <code>R</code> 键，输入以下路径并按回车：<br><code>%programdata%</code><br>这将打开系统级的 <code>ProgramData</code> 目录。</p></li><li><p><strong>编辑service.conf文件</strong><br>在 <code>ProgramData</code> 目录下，找到并进入 <code>AnyDesk</code> 文件夹。在此文件夹中，您会找到一个名为 <code>service.conf</code> 的核心配置文件。<br><strong>注意：</strong> 编辑此文件需要管理员权限。请以管理员身份运行文本编辑器（如Notepad++或记事本），然后从编辑器内部打开 <code>C:\ProgramData\AnyDesk\service.conf</code>。</p></li><li><p><strong>移除ID标识符</strong><br>在 <code>service.conf</code> 文件中，找到以下两行内容（其中数字部分为示例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ad.anynet.id=123456789</span><br><span class="line">ad.anynet.client_id=987654321</span><br></pre></td></tr></table></figure><p>将这两行<strong>完全删除</strong>，然后保存文件。</p></li><li><p><strong>重启AnyDesk服务</strong><br>为使更改生效，必须重启AnyDesk的后台服务。</p><ul><li>按下 <code>Windows</code> + <code>R</code> 键，输入 <code>services.msc</code> 并回车，打开服务管理器。</li><li>在服务列表中找到 “AnyDesk Service”。</li><li>右键单击该服务，选择“重新启动”。</li></ul><p>服务重启后，AnyDesk将在下次启动时为您生成一个新的ID。</p></li></ol><hr><p><strong>结论:</strong></p><p>以上两种方法均可有效解决因个人使用被AnyDesk误判为商业用途而产生的连接限制问题。方案一更为简便快捷，适用于大多数用户；方案二则提供了更精细化的控制。请根据您的具体情况和技术熟练度选择合适的方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> anydesk </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从下载到运行：VSCode 网页版部署全攻略</title>
      <link href="/posts/2420117366.html"/>
      <url>/posts/2420117366.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>通过 <code>code-server</code> 项目，我们可以将 VSCode 的强大功能带入浏览器，随时随地进行开发。</p><h4 id="获取-code-server-版本-📦"><a href="#获取-code-server-版本-📦" class="headerlink" title="获取 code-server 版本 📦"></a>获取 <code>code-server</code> 版本 📦</h4><p>首先，我们需要在 <code>code-server</code> 的 GitHub 项目中找到适合自己的版本。值得注意的是，这并非官方发布，但其功能已足够强大。访问 <a href="https://github.com/coder/code-server/releases/">code-server releases</a> 页面，选择适合的版本。</p><img src="/posts/2420117366/code-server%E5%8F%91%E5%B8%83%E9%A1%B5.png" class="" title="code-server发布页"><p>以版本 <code>4.96.2</code> 为例，使用以下命令下载压缩包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/coder/code-server/releases/download/v4.96.2/code-server-4.96.2-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>下载完成后，使用 <code>tar</code> 命令解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf code-server-4.96.2-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="启动服务-⚙️"><a href="#启动服务-⚙️" class="headerlink" title="启动服务 ⚙️"></a>启动服务 ⚙️</h4><p>进入解压后的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> code-server-4.96.2-linux-amd64</span><br></pre></td></tr></table></figure><p>执行以下命令启动服务，以生成配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/code-server</span><br></pre></td></tr></table></figure><p>此时，系统将提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2025-01-04T14:52:09.130Z] info  Using config file /root/.config/code-server/config.yaml</span><br></pre></td></tr></table></figure><img src="/posts/2420117366/%E7%94%9F%E6%88%90%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" class="" title="生成配置文件"><p>也就是配置文件生成在 <strong><code>/root/.config/code-server/config.yaml</code></strong><br>我们ctrl + c退出后编辑配置文件。</p><h4 id="编辑配置文件-🛠️"><a href="#编辑配置文件-🛠️" class="headerlink" title="编辑配置文件 🛠️"></a>编辑配置文件 🛠️</h4><p>在 <code>config.yaml</code> 中，设定以下参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bind-addr:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8888</span></span><br><span class="line"><span class="attr">auth:</span> <span class="string">password</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">&lt;登录vscode网页版的密码&gt;</span></span><br><span class="line"><span class="attr">cert:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>确保防火墙允许 8888 端口的访问。</p><h4 id="访问-VSCode-网页版-🌍"><a href="#访问-VSCode-网页版-🌍" class="headerlink" title="访问 VSCode 网页版 🌍"></a>访问 VSCode 网页版 🌍</h4><p>配置完成后，您可以通过浏览器访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&lt;服务器ip&gt;:8888</span><br></pre></td></tr></table></figure><img src="/posts/2420117366/%E8%AE%BF%E9%97%AEcode-server%E6%9C%8D%E5%8A%A1.png" class="" title="访问code server服务"><h4 id="设置code-server浏览器图标-😶‍🌫️"><a href="#设置code-server浏览器图标-😶‍🌫️" class="headerlink" title="设置code-server浏览器图标 😶‍🌫️"></a>设置code-server浏览器图标 😶‍🌫️</h4><p>在 <strong><code>/code-server/src/browser/media</code></strong> 下存放的都是图标文件，把要修改的图标替换上去就行</p><p>修改前：<img src="/posts/2420117366/code-server-ico.png" class="" title="code-server-ico"></p><p>修改后：<img src="/posts/2420117366/vscode-ico.png" class="" title="vscode-ico"></p><p>以下为vscode svg：</p><figure class="highlight svg"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><span class="comment">&lt;!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 32 32&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>file_type_vscode<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M29.01,5.03,23.244,2.254a1.742,1.742,0,0,0-1.989.338L2.38,19.8A1.166,1.166,0,0,0,2.3,21.447c.025.027.05.053.077.077l1.541,1.4a1.165,1.165,0,0,0,1.489.066L28.142,5.75A1.158,1.158,0,0,1,30,6.672V6.605A1.748,1.748,0,0,0,29.01,5.03Z&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#0065a9&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M29.01,26.97l-5.766,2.777a1.745,1.745,0,0,1-1.989-.338L2.38,12.2A1.166,1.166,0,0,1,2.3,10.553c.025-.027.05-.053.077-.077l1.541-1.4A1.165,1.165,0,0,1,5.41,9.01L28.142,26.25A1.158,1.158,0,0,0,30,25.328V25.4A1.749,1.749,0,0,1,29.01,26.97Z&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#007acc&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M23.244,29.747a1.745,1.745,0,0,1-1.989-.338A1.025,1.025,0,0,0,23,28.684V3.316a1.024,1.024,0,0,0-1.749-.724,1.744,1.744,0,0,1,1.989-.339l5.765,2.772A1.748,1.748,0,0,1,30,6.6V25.4a1.748,1.748,0,0,1-.991,1.576Z&quot;</span> <span class="attr">style</span>=<span class="string">&quot;fill:#1f9cf0&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="后台运行服务-🔄"><a href="#后台运行服务-🔄" class="headerlink" title="后台运行服务 🔄"></a>后台运行服务 🔄</h4><p>由于关闭终端会导致 <code>code-server</code> 关闭，我们可以使用 <code>pm2</code>、<code>screen</code> 或 <code>tmux</code> 等工具将服务挂在后台。这里以配置系统服务为例：</p><p>创建一个新的服务文件 <code>/etc/systemd/system/code.service</code>，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=VS Code Server</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=&lt;服务器主机名&gt;</span><br><span class="line"><span class="attr">ExecStart</span>=&lt;你的code-server项目路径&gt;/bin/code-server</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>启用并启动服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> code</span><br><span class="line"><span class="built_in">sudo</span> systemctl start code</span><br></pre></td></tr></table></figure><h4 id="解决浏览器访问问题-🛡️"><a href="#解决浏览器访问问题-🛡️" class="headerlink" title="解决浏览器访问问题 🛡️"></a>解决浏览器访问问题 🛡️</h4><p>若在非安全环境中无法正常使用网页视图和剪切板功能，可在浏览器设置中忽略此问题。以 Edge 浏览器为例：</p><ol><li>在地址栏输入 <code>edge://flags</code>，进入“实验”界面。</li><li>搜索 <code>Insecure origins treated as secure</code>，启用此功能。</li><li>在编辑框中输入 <code>code-server</code> 的 IP 地址和端口，并重启浏览器。<img src="/posts/2420117366/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98.png" class="" title="解决浏览器访问问题">至此，您的 VSCode 网页版已成功在服务器上部署并可正常使用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 小玩具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 隐藏文章：简单实用（隐藏后没有入口，但是依旧可以链接访问）</title>
      <link href="/posts/1030127711.html"/>
      <url>/posts/1030127711.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h4 id="开始之初"><a href="#开始之初" class="headerlink" title="开始之初"></a>开始之初</h4><p>在此，我将分享如何配置 <code>hexo-hide-posts</code> 插件，使其在不改变原有代码的情况下，优雅地隐藏文章。</p><h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><p>首先，于项目目录中执行以下命令，以安装此插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-hide-posts --save</span><br></pre></td></tr></table></figure><p>安装完成后，在项目根目录的 <code>_config.yml</code> 中，添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章隐藏：https://github.com/prinsss/hexo-hide-posts</span></span><br><span class="line"><span class="attr">hide_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否启用 hexo-hide-posts</span></span><br><span class="line">  <span class="attr">filter:</span> <span class="string">hidden</span> <span class="comment"># 隐藏文章的标识，也可以改成其他你喜欢的名字</span></span><br><span class="line">  <span class="attr">noindex:</span> <span class="literal">true</span> <span class="comment"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span></span><br><span class="line">  <span class="comment"># 设置白名单，白名单中的 generator 可以访问隐藏文章</span></span><br><span class="line">  <span class="attr">allowlist_generators:</span> []</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 设置黑名单，黑名单中的 generator 不可以访问隐藏文章</span></span><br><span class="line">  <span class="attr">blocklist_generators:</span> [<span class="string">&#x27;*&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="使用之法"><a href="#使用之法" class="headerlink" title="使用之法"></a>使用之法</h4><p>若在 <code>_config.yml</code> 中的配置为 <code>filter: hidden</code>，则在文章的 <code>front-matter</code> 中添加 <code>hidden: true</code> 即可隐藏文章。例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#x27;被隐藏的文章&#x27;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#x27;2024-07-20 00:21:14&#x27;</span></span><br><span class="line"><span class="attr">hidden:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h4 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h4><p>插件提供了黑白名单控制，只需在 <code>_config.yml</code> 中配置 <code>allowlist_generators</code> 与 <code>blocklist_generators</code> 参数即可。以下是一些示例：</p><ul><li><p><strong>示例1</strong>：让所有隐藏文章在存档页面和分类页面中可见，其他地方不可见。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hide_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">allowlist_generators:</span> [<span class="string">&#x27;archive&#x27;</span>, <span class="string">&#x27;category&#x27;</span>]</span><br></pre></td></tr></table></figure></li><li><p><strong>示例2</strong>：仅在首页和 RSS 隐藏部分文章，其他地方可见。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hide_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">allowlist_generators:</span> [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">  <span class="attr">blocklist_generators:</span> [<span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;feed&#x27;</span>]</span><br></pre></td></tr></table></figure></li></ul><h4 id="配置文件解说"><a href="#配置文件解说" class="headerlink" title="配置文件解说"></a>配置文件解说</h4><p>在我的配置文件中：</p><ul><li><code>enable: true</code> 启用了 <code>hexo-hide-posts</code> 插件。</li><li><code>filter: hidden</code> 指定了隐藏文章的标识符。</li><li><code>noindex: true</code> 为隐藏文章添加了 <code>noindex</code> 标签，以阻止搜索引擎的收录。</li><li><code>allowlist_generators: []</code> 设置了白名单为空，即默认不允许任何生成器访问隐藏文章。</li><li><code>blocklist_generators: [&#39;*&#39;]</code> 设置了黑名单为所有生成器，即所有生成器默认无法访问隐藏文章。<br><strong>如果同时设置了黑白名单，白名单优先级高于黑名单</strong></li></ul><p>通过这些设置，我可以优雅地管理博客的可见性，使其既保持内容的丰富，又不失整洁的观感。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webtop 使用教程：如何在浏览器中运行桌面环境</title>
      <link href="/posts/1386039456.html"/>
      <url>/posts/1386039456.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>在现代工作环境中，跨设备的灵活性变得尤为重要。对于那些在多台设备上使用 Hexo 的用户来说，每次更换设备时重新部署 Hexo 的繁琐操作可能令人头疼。为了解决这个问题，我决定利用闲置的服务器来搭建一个可以通过浏览器访问的远程桌面。</p><p>起初，我尝试了 <a href="https://kodcloud.com/">可道云</a> 和 <a href="https://webos.im/doc/">webos</a>，但这些方案并未完全满足我的需求。经过一番研究，我发现了 <a href="https://docs.linuxserver.io/images/docker-webtop/">Webtop</a> 这一强大的工具。</p><h2 id="Webtop-简介"><a href="#Webtop-简介" class="headerlink" title="Webtop 简介"></a>Webtop 简介</h2><p>Webtop 是一个基于 Alpine、Ubuntu、Fedora 和 Arch 的容器，提供完整的桌面环境，并可通过任何现代 Web 浏览器访问。它支持 <strong><code>amd64</code></strong> 和 <strong><code>arm64</code></strong> 架构，部署极其简单，只需一行 Docker 命令。</p><h2 id="部署-Webtop"><a href="#部署-Webtop" class="headerlink" title="部署 Webtop"></a>部署 Webtop</h2><p>确保您已经安装了 Docker，然后运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=webtop \</span><br><span class="line">  --security-opt seccomp=unconfined \  </span><br><span class="line">  -e PUID=1000 \  </span><br><span class="line">  -e PGID=1000 \  </span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -e CUSTOM_USER=&lt;账号&gt; \</span><br><span class="line">  -e PASSWORD=&lt;密码&gt; \</span><br><span class="line">  -e SUBFOLDER=/ \</span><br><span class="line">  -e TITLE=Webtop \</span><br><span class="line">  -e LC_ALL=zh_TW.UTF-8 \</span><br><span class="line">  -e DOCKER_MODS=linuxserver/mods:universal-package-install \</span><br><span class="line">  -e INSTALL_PACKAGES=font-noto-cjk \</span><br><span class="line">  -p 3080:3000 \</span><br><span class="line">  -p 3443:3001 \</span><br><span class="line">  -v ~/webtop/data:/config \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  --device /dev/dri:/dev/dri \</span><br><span class="line">  --shm-size=&quot;1gb&quot; \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  docker.1ms.run/linuxserver/webtop:ubuntu-xfce</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d \</span></span><br><span class="line"><span class="language-bash">  --name=webtop \</span></span><br><span class="line"><span class="language-bash">  --security-opt seccomp=unconfined \</span></span><br><span class="line"><span class="language-bash">  -e PUID=1000 \</span></span><br><span class="line"><span class="language-bash">  -e PGID=1000 \</span></span><br><span class="line"><span class="language-bash">  -e TZ=Asia/Shanghai \</span></span><br><span class="line"><span class="language-bash">  -e CUSTOM_USER=&lt;账号&gt; \</span></span><br><span class="line"><span class="language-bash">  -e PASSWORD=&lt;密码&gt; \</span></span><br><span class="line"><span class="language-bash">  -e SUBFOLDER=/ \</span></span><br><span class="line"><span class="language-bash">  -e TITLE=Webtop \</span></span><br><span class="line"><span class="language-bash">  -e LC_ALL=en_US.UTF-8 \</span></span><br><span class="line"><span class="language-bash">  -p 3080:3000 \</span></span><br><span class="line"><span class="language-bash">  -p 3443:3001 \</span></span><br><span class="line"><span class="language-bash">  -v ~/webtop/data:/config \</span></span><br><span class="line"><span class="language-bash">  -v /var/run/docker.sock:/var/run/docker.sock \</span></span><br><span class="line"><span class="language-bash">  --device /dev/dri:/dev/dri \</span></span><br><span class="line"><span class="language-bash">  --shm-size=<span class="string">&quot;1gb&quot;</span> \</span></span><br><span class="line"><span class="language-bash">  --restart unless-stopped \</span></span><br><span class="line"><span class="language-bash">  docker.1ms.run/linuxserver/webtop:ubuntu-xfce</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>账户安全</strong>：为确保安全，设置访问账户和密码是必需的，否则任何人都可以访问您的桌面。</li><li><strong>中文支持</strong>：如果您的服务器在国内，下载中文支持包可能会很慢。建议使用 <code>-e LC_ALL=en_US.UTF-8</code>，并在容器启动后手动安装 <code>font-noto-cjk</code>。</li></ul><h2 id="选择适合您的版本"><a href="#选择适合您的版本" class="headerlink" title="选择适合您的版本"></a>选择适合您的版本</h2><p>Webtop 提供多种桌面环境和操作系统版本。您可以根据需要选择不同的版本：</p><table><thead><tr><th>Tag</th><th>描述</th></tr></thead><tbody><tr><td>ubuntu-xfce</td><td>XFCE Ubuntu</td></tr><tr><td>fedora-xfce</td><td>XFCE Fedora</td></tr><tr><td>arch-xfce</td><td>XFCE Arch</td></tr><tr><td>debian-xfce</td><td>XFCE Debian</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>切换版本只需在命令末尾更改 <code>linuxserver/webtop:&lt;Tag&gt;</code>。</p><h2 id="访问您的远程桌面"><a href="#访问您的远程桌面" class="headerlink" title="访问您的远程桌面"></a>访问您的远程桌面</h2><p>完成部署后，查看 Docker 日志，确保容器已成功启动。然后，您可以通过浏览器访问 <code>http://&lt;服务器IP&gt;:3080</code> 或 <code>https://&lt;服务器IP&gt;:3443</code>，输入您的账户和密码即可。</p><p>通过这种方式，您可以轻松实现跨设备的 Hexo 部署和管理，享受无缝的工作体验。希望这篇文章对您有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> 小玩具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云桌面 </tag>
            
            <tag> webtop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 使用 GitHub Actions 自动推送更新到自己其他服务器</title>
      <link href="/posts/2059263623.html"/>
      <url>/posts/2059263623.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>在使用 Hexo 搭建博客并推送到 GitHub Pages 后，我希望每次更新博客时，能够自动同步到我们的服务器（服务器上有其他域名，也是为了解决github page只能使用一个自定义域名的问题）。虽然可以通过在服务器上定期执行 <strong><code>git pull</code></strong> 来实现，但这种方法略显不够优雅。因此，我想到了使用 <strong><code>GitHub Actions</code></strong> 来实现这个自动化流程。💡</p><h2 id="问题背景-🤔"><a href="#问题背景-🤔" class="headerlink" title="问题背景 🤔"></a>问题背景 🤔</h2><p>每次执行 <strong><code>hexo cl &amp;&amp; hexo g -d</code></strong> 后，GitHub Actions 的配置文件会被覆盖掉，因为 Hexo 部署时不会包含 <strong><code>.github</code></strong> 目录下的文件。这是因为 Hexo 默认不会编译以 <strong><code>.</code></strong> 开头的文件夹，这导致 <strong><code>public</code></strong> 目录中不会有 <strong><code>.github/workflows/&lt;文件名&gt;.yml</code></strong> 文件，从而使得 Actions 失效。</p><h2 id="解决方案-🎯"><a href="#解决方案-🎯" class="headerlink" title="解决方案 🎯"></a>解决方案 🎯</h2><p>通过阅读 <code>hexo-deployer-git</code> 的文档，我发现可以使用 <code>extend_dirs</code> 字段来包含特定的文件或目录，将其一同提交到远程仓库。这样就可以完美解决这个问题。👌</p><h3 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h3><p>在 Hexo 的 <code>_config.yml</code> 中进行如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;github</span> <span class="string">地址&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">extend_dirs:</span> [<span class="string">.github/workflows/</span>]</span><br></pre></td></tr></table></figure><p>注意：<code>extend_dirs</code> 读取的是博客根目录下的文件夹，而不是 <code>source</code> 中的。因此，GitHub Actions 的 yml 文件应该位于 <code>/blogroot/.github/workflows/&lt;文件名&gt;.yml</code>，并且不支持通配符。</p><img src="/posts/2059263623/image-20241226173607784.png" class="" title="image-20241226173607784"><p>这样配置后，每次执行 <code>hexo d</code> 时，<code>.github/workflows/</code> 文件夹中的内容会被放到提交目录的根目录，即 <code>/blogroot/.deploy_git/</code> 中，GitHub 就能成功识别并执行 Action。🎉</p><img src="/posts/2059263623/image-20241226173641038.png" class="" title="image-20241226173641038"><h2 id="使用-GitHub-Actions-同步到服务器-🖥️"><a href="#使用-GitHub-Actions-同步到服务器-🖥️" class="headerlink" title="使用 GitHub Actions 同步到服务器 🖥️"></a>使用 GitHub Actions 同步到服务器 🖥️</h2><p>在项目根目录 <code>/blogroot/</code> 下创建 <code>.github/workflows/deploy.yml</code> 文件，填入以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">Server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span>  <span class="comment"># 监听 main 分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">environment:</span>   <span class="comment"># 表示使用github-pages变量，这个在github的setting设置</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">github-pages</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">SSH</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">webfactory/ssh-agent@v0.5.3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ssh-private-key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SSH_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">to</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">SERVER_IP:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SERVER_IP</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">SERVER_USER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SERVER_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">SERVER_PORT:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SERVER_PORT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">REPO_URL:</span> <span class="string">https://github.com/Pleiadem/Pleiadem.github.io.git</span></span><br><span class="line">        <span class="attr">TARGET_DIR:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TARGET_DIR</span> <span class="string">&#125;&#125;</span>   <span class="comment"># 我这里会先删除目录再重建，避免git pull失败，！注意风险！</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        ssh -o StrictHostKeyChecking=no -p $SERVER_PORT $SERVER_USER@$SERVER_IP &quot;</span></span><br><span class="line"><span class="string">          if [ -d $TARGET_DIR ]; then</span></span><br><span class="line"><span class="string">            rm -rf $TARGET_DIR</span></span><br><span class="line"><span class="string">          fi</span></span><br><span class="line"><span class="string">          mkdir -p $TARGET_DIR</span></span><br><span class="line"><span class="string">          git clone $REPO_URL $TARGET_DIR</span></span><br><span class="line"><span class="string">        &quot;</span></span><br></pre></td></tr></table></figure><h3 id="配置-GitHub-Secrets-🔑"><a href="#配置-GitHub-Secrets-🔑" class="headerlink" title="配置 GitHub Secrets 🔑"></a>配置 GitHub Secrets 🔑</h3><p>接下来，到 GitHub Pages 项目的设置中配置环境变量：</p><ol><li><p>点击 <code>Settings</code>，找到 <code>Environments</code>。</p></li><li><p>进入 GitHub 默认创建的 <code>github-pages</code> 环境变量组。</p><img src="/posts/2059263623/image-20241226173912885.png" class="" title="image-20241226173912885"></li><li><p>在 <code>Environment secrets</code> 中点击 <code>Add environment secret</code>，设置以下变量：</p><ul><li><p><code>SERVER_IP</code>：你的服务器 IP 地址。</p></li><li><p><code>SERVER_PORT</code>：SSH 连接的端口。</p></li><li><p><code>SERVER_USER</code>：SSH 用户名。</p></li><li><p><code>SSH_PRIVATE_KEY</code>：用于连接服务器的私钥。</p></li><li><p><code>TARGET_DIR</code>：服务器上的目标目录。</p><img src="/posts/2059263623/image-20241226173937397.png" class="" title="image-20241226173937397"></li></ul></li></ol><p>完成这些配置后，运行 <code>hexo cl &amp;&amp; hexo g -d</code>，即可自动运行github action，可到后台查看进度。🚀</p><img src="/posts/2059263623/image-20241226174137641.png" class="" title="image-20241226174137641"><p>通过这样的设置，每次你更新 Hexo 博客并推送到 GitHub 时，GitHub Actions 将自动同步更新到你的服务器上，省去手动操作的麻烦。希望这个方法对你有所帮助！😊</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客推送到 GitHub Pages：自定义域名解析与持久化方案</title>
      <link href="/posts/1386039455.html"/>
      <url>/posts/1386039455.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>在将 Hexo 博客推送到 GitHub Pages 并使用自定义域名的过程中，常常会遇到更新后域名失效的问题。本文将详细介绍如何将Hexo 博客推送到 GitHub Pages，并解决这一问题，保持域名的持续有效。</p><hr><h2 id="🌿-创建-GitHub-仓库"><a href="#🌿-创建-GitHub-仓库" class="headerlink" title="🌿 创建 GitHub 仓库"></a>🌿 创建 GitHub 仓库</h2><ol><li><p><strong>创建仓库</strong><br>在 GitHub 主页的 repositories 中，新建一个名为 <code>&lt;你的GitHub用户名&gt;.github.io</code> 的仓库。直接创建即可，无需额外配置。</p><img src="/posts/1386039455/image-20241225175418615.png" class="" title="image-20241225175418615"></li><li><p><strong>生成访问令牌</strong><br>前往 <a href="https://github.com/settings/apps">GitHub 设置页面</a>，在 Personal access tokens 下创建一个新的 token。选择 Fine-grained tokens，点击 Generate new token。输入 token 名称（如“个人 Hexo 博客”），设置过期时间。</p><img src="/posts/1386039455/1735119774773.jpg" class="" width="1735119774773"></li><li><p><strong>配置权限</strong>  </p><ul><li><p>在 Repository access 下选择 Only select repositories，并选择刚刚创建的仓库。</p></li><li><p>在 Permissions 的 Repository permissions 中打开所需权限（建议全开），然后生成 token 并保存。</p><img src="/posts/1386039455/1735119774780-1735120502300-7.jpg" class="" width="1735119774780"></li></ul></li></ol><hr><h2 id="🌿-配置-Hexo-部署"><a href="#🌿-配置-Hexo-部署" class="headerlink" title="🌿 配置 Hexo 部署"></a>🌿 配置 Hexo 部署</h2><p>打开 Hexo 项目的 <code>_config.yml</code> 文件，找到 <code>deploy</code> 部分，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://&lt;你的GitHub用户名&gt;:&lt;生成的token&gt;@github.com/&lt;你的GitHub用户名&gt;/&lt;你的GitHub用户名&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><img src="/posts/1386039455/image-20241225175556038.png" class="" title="image-20241225175556038"><p>保存配置后，执行以下命令推送到 GitHub：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure><hr><h2 id="🌿-自定义域名设置"><a href="#🌿-自定义域名设置" class="headerlink" title="🌿 自定义域名设置"></a>🌿 自定义域名设置</h2><ol><li><p><strong>配置 DNS</strong><br>使用 Cloudflare 等 DNS 服务商，将你的子域名通过 CNAME 解析到 <code>&lt;你的GitHub用户名&gt;.github.io</code>。</p><img src="/posts/1386039455/image-20241225175651417.png" class="" title="image-20241225175651417"></li><li><p><strong>GitHub Pages 设置</strong><br>在 GitHub 仓库的设置中，找到 Pages 部分，在自定义域名字段中输入你的域名并保存。GitHub 会自动开启 HTTPS。</p><img src="/posts/1386039455/image-20241225175804036.png" class="" title="image-20241225175804036"><p>dns配置没问题的话，过一会就会成功。</p><img src="/posts/1386039455/image-20241225175816726.png" class="" title="image-20241225175816726"></li></ol><hr><h2 id="🌿-持久化解决方案"><a href="#🌿-持久化解决方案" class="headerlink" title="🌿 持久化解决方案"></a>🌿 持久化解决方案</h2><p>每次更新后自定义域名失效，是因为 GitHub Pages 的域名解析依赖于仓库中的一个 CNAME 文件，更新后文件被覆盖而消失。</p><img src="/posts/1386039455/image-20241225175903287.png" class="" title="image-20241225175903287"><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>在 Hexo 项目的根目录下的 <code>source</code> 文件夹中，创建一个名为 <code>CNAME</code> 的文件，并在文件中输入Github上CNAME文件里的内容。这样，CNAME 文件会在每次生成静态文件时被包含在内，确保域名解析不会失效。</p><img src="/posts/1386039455/image-20241225175927707.png" class="" title="image-20241225175927707"><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上述步骤，你可以成功将 Hexo 博客部署到 GitHub Pages，并使用自定义域名。配置完成后，域名解析将保持稳定，不再因更新而失效。愿此指南能为你提供帮助，静候佳音。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客图片显示问题解决：从 post_asset_folder 到封面图设置</title>
      <link href="/posts/70775486.html"/>
      <url>/posts/70775486.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>在管理 Hexo 博客时，图片的组织和管理中会出现各种问题，比如经典的开启了post_asset_folder，使用后还是不显示。为了提高管理效率和结构化程度，我们可以为每篇文章创建一个独立的资源文件夹。以下是具体的实现步骤。</p><hr><h2 id="🌿-步骤一：配置-Hexo"><a href="#🌿-步骤一：配置-Hexo" class="headerlink" title="🌿 步骤一：配置 Hexo"></a>🌿 步骤一：配置 Hexo</h2><p>首先，我们需要修改 Hexo 的配置文件，使其支持为每篇文章创建独立的资源文件夹。</p><h3 id="1-修改-config-yml"><a href="#1-修改-config-yml" class="headerlink" title="1. 修改 _config.yml"></a>1. 修改 <code>_config.yml</code></h3><p>打开 Hexo 根目录下的 <code>_config.yml</code> 文件，找到并设置以下选项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这将启用每篇文章的资源文件夹功能。</p><hr><h2 id="🌿-步骤二：创建新文章"><a href="#🌿-步骤二：创建新文章" class="headerlink" title="🌿 步骤二：创建新文章"></a>🌿 步骤二：创建新文章</h2><h3 id="2-1-使用命令创建文章"><a href="#2-1-使用命令创建文章" class="headerlink" title="2.1 使用命令创建文章"></a>2.1 使用命令创建文章</h3><p>在终端中，导航到 Hexo 项目目录，并使用以下命令创建新文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] <span class="string">&quot;&lt;title&gt;&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>layout</code> 可以省略，使用默认值。</li><li><code>title</code> 是文章的标题，如果包含空格，请用双引号括起来。</li></ul><p>此命令将在 <code>source</code> 目录下自动创建一个与文章同名的文件夹和 <code>.md</code> 文件。</p><hr><h2 id="🌿-步骤三：配置-Typora"><a href="#🌿-步骤三：配置-Typora" class="headerlink" title="🌿 步骤三：配置 Typora"></a>🌿 步骤三：配置 Typora</h2><p>为了更方便地管理图片，我们可以利用 Typora 的自动化功能。</p><h3 id="3-1-设置-Typora-的图片选项"><a href="#3-1-设置-Typora-的图片选项" class="headerlink" title="3.1 设置 Typora 的图片选项"></a>3.1 设置 Typora 的图片选项</h3><p>打开 Typora，进入偏好设置，选择“图像”选项。将图片复制路径设置为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./$(filename)</span><br></pre></td></tr></table></figure><img src="/posts/70775486/image-20241225171412896.png" class="" title="image-20241225171412896"><p>这样，Typora 会在我们粘贴图片时，自动将图片复制到文章的同名文件夹中。如果文件夹不存在，Typora 会自动创建。</p><hr><h2 id="🌿-步骤四：安装-Hexo-插件"><a href="#🌿-步骤四：安装-Hexo-插件" class="headerlink" title="🌿 步骤四：安装 Hexo 插件"></a>🌿 步骤四：安装 Hexo 插件</h2><p>为了确保图片在生成的博客中正常显示，我们需要安装一个插件。</p><h3 id="4-1-安装-hexo-asset-img"><a href="#4-1-安装-hexo-asset-img" class="headerlink" title="4.1 安装 hexo-asset-img"></a>4.1 安装 <code>hexo-asset-img</code></h3><p>在 Hexo 项目目录下，运行以下命令安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-img --save</span><br></pre></td></tr></table></figure><img src="/posts/70775486/image-20241225171447662.png" class="" title="image-20241225171447662"><p>⚠️ 注意：请确保安装的是 <code>hexo-asset-img</code>，而不是其他类似的插件。安装后，检查 <code>node_modules</code> 目录，确保插件安装成功。如果有 <code>hexo-asset-image</code>，请手动删除。</p><h3 id="4-2-重新生成博客"><a href="#4-2-重新生成博客" class="headerlink" title="4.2 重新生成博客"></a>4.2 重新生成博客</h3><p>安装完成后，执行以下命令清理和重新生成博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><hr><h2 id="🌿-步骤五：管理封面图片"><a href="#🌿-步骤五：管理封面图片" class="headerlink" title="🌿 步骤五：管理封面图片"></a>🌿 步骤五：管理封面图片</h2><p>对于每篇文章的封面图片，我们可以有两种管理方式：</p><h3 id="5-1-使用-abbrlink-插件"><a href="#5-1-使用-abbrlink-插件" class="headerlink" title="5.1 使用 abbrlink 插件"></a>5.1 使用 <code>abbrlink</code> 插件</h3><p>如果已安装 <code>abbrlink</code> 插件，可以直接在文章头部配置（如果不是文章中的图片，那就粘贴一下把文件名保存下来后删除就行，typora会自动上传到同名文件夹）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span> <span class="string">/posts/&lt;abbrlink&gt;/图片文件名</span></span><br><span class="line"><span class="attr">abbrlink:</span> <span class="number">2293603394</span>  <span class="string">(没有abbrlink字段的话，等写完文章后hexo</span> <span class="string">g</span> <span class="string">生成一下，然后再去写cover就行)</span></span><br></pre></td></tr></table></figure><img src="/posts/70775486/image-20241225171605380.png" class="" title="image-20241225171605380"><p>无论是hexo s 还是上传到github page都能正常显示。</p><img src="/posts/70775486/image-20241225171640218.png" class="" title="image-20241225171640218"><h3 id="5-2-或者使用全局图片目录"><a href="#5-2-或者使用全局图片目录" class="headerlink" title="5.2 或者使用全局图片目录"></a>5.2 或者使用全局图片目录</h3><p>在 <code>source</code> 目录下创建一个 &#96;image 文件夹，直接通过路径引用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/image/图片名字</span><br></pre></td></tr></table></figure><img src="/posts/70775486/image-20241225171948487.png" class="" title="image-20241225171948487"><img src="/posts/70775486/image-20241225171921932.png" class="" title="image-20241225171921932"><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>每次修改、写完文章，最好使用 <strong><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></strong> 清理缓存（否则可能不生效）然后本地预览下</p><p>没问题再使用 <strong><code>hexo d</code></strong> 推送到远端仓库</p><p>通过以上步骤，我们可以实现每篇文章独立的资源管理，让我们更优雅地写博客。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客迁移记录：问题与解决方案</title>
      <link href="/posts/2293603394.html"/>
      <url>/posts/2293603394.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>在将 Hexo 博客从旧电脑迁移到新电脑的过程中，遇到了一些技术问题。以下记录了整个过程以及解决方案，供参考。</p><hr><h2 id="迁移步骤"><a href="#迁移步骤" class="headerlink" title="迁移步骤"></a>迁移步骤</h2><ol><li><p><strong>打包博客文件</strong><br>在旧电脑上，使用以下命令压缩博客目录，排除 <code>node_modules</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r blog.zip blog -x <span class="string">&quot;blog/node_modules/*&quot;</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf blog.tar.gz --exclude=&#x27;blog/node_modules&#x27; blog</span><br></pre></td></tr></table></figure></li><li><p><strong>安装 Hexo 和解压博客</strong>  </p><ul><li><p>在新电脑上安装 Hexo CLI：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>初始化一个新的博客目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></li><li><p>解压旧博客的压缩包，并替换新目录的内容。</p></li></ul></li><li><p><strong>安装依赖</strong><br>在新目录中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="1-安装-hexo-renderer-pug-和-hexo-renderer-stylus-失败"><a href="#1-安装-hexo-renderer-pug-和-hexo-renderer-stylus-失败" class="headerlink" title="1. 安装 hexo-renderer-pug 和 hexo-renderer-stylus 失败"></a>1. 安装 <code>hexo-renderer-pug</code> 和 <code>hexo-renderer-stylus</code> 失败</h3><p>使用 npm 安装时，出现以下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm error Cannot read properties of null (reading &#x27;matches&#x27;)</span><br></pre></td></tr></table></figure><img src="/posts/2293603394/image-20241225161524040.png" class="" title="image-20241225161524040"><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>使用 <code>pnpm</code> 并指定镜像源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install hexo-renderer-pug hexo-renderer-stylus --save --registry=https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><img src="/posts/2293603394/image-20241225161546869.png" class="" title="image-20241225161546869"><p>虽然安装成功，但有一些依赖项被标记为废弃。这些警告不影响使用，可以暂时忽略。</p><hr><h3 id="2-缺少-moment-timezone-模块"><a href="#2-缺少-moment-timezone-模块" class="headerlink" title="2. 缺少 moment-timezone 模块"></a>2. 缺少 <code>moment-timezone</code> 模块</h3><p>运行服务器时，出现模块缺失的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR Script load failed: themes\butterfly\scripts\helpers\page.js</span><br><span class="line">Error: Cannot find module &#x27;moment-timezone&#x27;</span><br></pre></td></tr></table></figure><img src="/posts/2293603394/image-20241225161336162.png" class="" title="image-20241225161336162"><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>安装缺失的模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i moment-timezone --save</span><br></pre></td></tr></table></figure><p>完成后，Hexo 服务器可以正常启动。</p><img src="/posts/2293603394/image-20241225161405162.png" class="" title="image-20241225161405162"><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>迁移 Hexo 博客的完整流程如下：</p><ol><li>在旧电脑上压缩博客目录，排除 <code>node_modules</code>。</li><li>在新电脑上安装 Hexo CLI 并初始化博客。</li><li>替换博客内容。</li><li>如果 <code>npm install</code> 出现问题，使用 <code>pnpm</code> 安装依赖。</li><li>安装缺失的模块，如 <code>moment-timezone</code>。</li></ol><hr><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>对于依赖项的废弃警告，虽然不影响使用，但建议定期检查更新。</li><li>如果网络不稳定，考虑使用国内镜像源。</li></ul><hr><p>完成这些步骤后，运行以下命令启动服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>此时，博客应该可以正常访问。希望这篇记录能为你提供一些帮助。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Serv00 上安装 Alist 并通过 Cloudflare Tunnel 映射域名</title>
      <link href="/posts/2935205373.html"/>
      <url>/posts/2935205373.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><p>今天，我将分享如何在我们的服务器 Serv00 上安装 Alist，并通过 Cloudflare Tunnel 将其映射到自己的域名。同时，我们会使用 PM2 来管理 Alist 服务的运行环境和监控。🚀</p><h2 id="安装-PM2"><a href="#安装-PM2" class="headerlink" title="安装 PM2"></a>安装 PM2</h2><p>首先，通过 SSH 连接到 Serv00，然后使用一键脚本安装 PM2。PM2 是一个流行的 Node.js 进程管理器，可以帮助我们更好地管理应用程序。运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -s https://raw.githubusercontent.com/k0baya/alist_repl/main/serv00/install-pm2.sh)</span><br></pre></td></tr></table></figure><h2 id="安装-Alist"><a href="#安装-Alist" class="headerlink" title="安装 Alist"></a>安装 Alist</h2><p>前往 <a href="https://github.com/AlistGo/alist/releases/">Alist 的 GitHub 发布页</a>，找到适合 Serv00 的 Alist 测试版本（注意选择 FreeBSD amd64）。在服务器上创建一个文件夹用于存放 Alist 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/domains/alist</span><br></pre></td></tr></table></figure><p>接下来，下载并解压 Alist：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/AlistGo/alist/releases/download/beta/alist-freebsd-amd64.tar.gz -O - | tar -xz -C ~/domains/alist</span><br></pre></td></tr></table></figure><h2 id="配置端口和服务"><a href="#配置端口和服务" class="headerlink" title="配置端口和服务"></a>配置端口和服务</h2><p>在服务器面板的 Port Reservation 选项卡中放行一个随机 TCP 端口。在刚刚下载的 Alist 目录下，使用以下命令生成管理密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./alist admin random</span><br></pre></td></tr></table></figure><p>然后启动服务来生成配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./alist --server</span><br></pre></td></tr></table></figure><p>启动后通过 <code>Ctrl + C</code> 停止服务，编辑配置文件。在当前路径下的 <code>data</code> 文件夹中找到 <code>config.json</code> 文件，使用 <code>vim</code> 或面板中的 File Manager 编辑，将 Alist 的端口修改为之前放行的端口，并将 <code>scheme</code> 的 <code>address</code> 属性改为 <code>127.0.0.1</code>（可选，防止别人通过 IP+端口访问，后面我们使用 HTTPS+域名）。</p><p>你还可以根据需要修改数据库配置，Serv00 提供了 MySQL、PostgreSQL 和 MongoDB，您可以选择适合自己的数据库，或者使用 Alist 自带的 SQLite。</p><p>使用 PM2 管理和启动 Alist：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start ./alist -- server</span><br></pre></td></tr></table></figure><p>检查应用运行状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/4e8ea37a520a44caaf5ed6395f2e97a9.png" alt="get status"></p><h2 id="通过-Cloudflare-Tunnel-映射域名"><a href="#通过-Cloudflare-Tunnel-映射域名" class="headerlink" title="通过 Cloudflare Tunnel 映射域名"></a>通过 Cloudflare Tunnel 映射域名</h2><ol><li>打开 <a href="https://one.dash.cloudflare.com/">Cloudflare Zero Trust 控制面板</a>，创建一个 Zero Trust，选择免费计划并设置支付方式（需要境内的双币卡）。</li><li>在 Network 的 Tunnels 中创建一个 Tunnel，选择 Cloudflared 部署方式，输入 Tunnel 名字，然后复制命令行并记下 token。</li></ol><p><img src="https://i-blog.csdnimg.cn/direct/fc1edcbdddfd47c682395af8fbac3622.jpeg" alt="Tunnel Create"></p><p>前往 <a href="https://cloudflared.bowring.uk/">Cloudflared 下载页面</a>，下载适合 FreeBSD 的 Cloudflared：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://cloudflared.bowring.uk/binaries/cloudflared-freebsd-2024.11.1.7z &amp;&amp; 7z x cloudflared-freebsd-2024.11.1.7z &amp;&amp; <span class="built_in">rm</span> cloudflared-freebsd-2024.11.1.7z &amp;&amp; <span class="built_in">mv</span> -f ./temp/cloudflared-freebsd-2024.11.1 ./cloudflared &amp;&amp; <span class="built_in">rm</span> -rf temp</span><br></pre></td></tr></table></figure><p>使用 PM2 启动 Cloudflared：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start ./cloudflared -- tunnel --edge-ip-version auto --protocol http2 --heartbeat-interval 10s run --token ARGO_TOKEN</span><br></pre></td></tr></table></figure><p>记得将 <code>ARGO_TOKEN</code> 替换为你的实际 Token。</p><p>在 Cloudflare 面板中配置域名对应的端口，为你的域名配置一个子域名，Leave Path 空白，URL 填写为内网服务的 IP 加端口号。Type 建议使用 HTTP，因为 Cloudflare 会自动提供 HTTPS。</p><p><img src="https://i-blog.csdnimg.cn/direct/797065e8681945f1b0b092e33849c2b0.jpeg" alt="edit port"></p><h2 id="结果与评价"><a href="#结果与评价" class="headerlink" title="结果与评价"></a>结果与评价</h2><p>完成上面的步骤后，你可以直接输入刚刚设置的域名来访问 Alist。这种方法不仅提供了简单配置的低门槛条件，还为 Self-hosted 玩家提供了丰富的探索空间。🎉</p><p>然而需要注意的是，由于 Cloudflare Tunnel 在国内的访问速度不佳，并且可能存在断流情况，请根据需要谨慎使用。✨</p>]]></content>
      
      
      <categories>
          
          <category> 小玩具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Serv00 </tag>
            
            <tag> Alist </tag>
            
            <tag> Cloudflare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用自建 Tabby Web 来同步 Tabby 配置</title>
      <link href="/posts/2053724735.html"/>
      <url>/posts/2053724735.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"/><h2 id="注册-Github-App"><a href="#注册-Github-App" class="headerlink" title="注册 Github App"></a>注册 Github App</h2><p>首先，我们需要注册一个 Github App。你可以访问 <a href="https://github.com/settings/applications/new">Github 应用注册页面</a> 进行注册。填入以下信息：</p><ul><li>Homepage URL: <code>https://tabby.example.com</code></li><li>Authorization callback URL: <code>https://tabby.example.com/api/1/auth/social/complete/github/</code></li></ul><p><img src="https://i-blog.csdnimg.cn/direct/78ca23e901aa48568e5aee876d21ac0c.png" alt="tabby"></p><p>注册完成后，记得保存 Client ID 和获取 Client secrets。</p><p><img src="https://i-blog.csdnimg.cn/direct/3b7f399d4d294baeba4940d21cfcb135.png" alt="tabby"></p><h2 id="运行-Tabby-Web"><a href="#运行-Tabby-Web" class="headerlink" title="运行 Tabby Web"></a>运行 Tabby Web</h2><p>接下来，我们需要创建一个 <code>podman-compose.yml</code> 文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">tabby:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/eugeny/tabby-web:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tabby</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;3005:8000&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/app-dist</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATABASE_URL=sqlite:app-dist/db.sqlite3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PORT=8000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEBUG=False</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SOCIAL_AUTH_GITHUB_KEY=xxxx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SOCIAL_AUTH_GITHUB_SECRET=xxxx</span></span><br></pre></td></tr></table></figure><p>运行以下命令启动 Tabby Web：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">podman pull ghcr.io/eugeny/tabby-web:latest</span><br><span class="line">podman-compose up -d</span><br></pre></td></tr></table></figure><p>然后，使用 <a href="https://so.csdn.net/so/search?q=Nginx&spm=1001.2101.3001.7020">Nginx</a> 或其他工具为 Tabby Web 实例做一个反向代理。</p><h2 id="配置-Tabby-Web"><a href="#配置-Tabby-Web" class="headerlink" title="配置 Tabby Web"></a>配置 Tabby Web</h2><p>进入容器 shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">podman <span class="built_in">exec</span> -it tabby /bin/sh</span><br></pre></td></tr></table></figure><p>从 <a href="https://registry.npmjs.org/tabby-web-container/">这里</a> 找到一个较新的版本号，然后注册应用版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./manage.sh add_version 1.0.197-nightly.1</span><br></pre></td></tr></table></figure><h2 id="配置-Tabby-同步"><a href="#配置-Tabby-同步" class="headerlink" title="配置 Tabby 同步"></a>配置 Tabby 同步</h2><p>首先，启用库（Vault），设置主密码，并确保不开启 Encrypt config file 功能。</p><p><img src="https://i-blog.csdnimg.cn/direct/41a812dadb634b2cb06e444492e6dda2.png" alt="tabby"></p><p><img src="https://i-blog.csdnimg.cn/direct/d70609c46ab84aae95e4e4ba7f0534d9.png" alt="tabby"></p><p>在 Tabby 页面中登录 GitHub，复制同步 Token。</p><p><img src="https://i-blog.csdnimg.cn/direct/09925794c2124607a00b4c00e0f4d325.png" alt="tabby"></p><p><img src="https://i-blog.csdnimg.cn/direct/e0f3467b621d4595907428a0319e9a76.png" alt="tabby"></p><p>在 Tabby 设置中，进入 Config Sync 设置，填入以下信息：</p><ul><li>Sync Host: <code>https://tabby.example.com</code></li><li>Secret sync token: <code>YOUR_TOKEN</code></li></ul><p><img src="https://i-blog.csdnimg.cn/direct/d53e3d6b8dc04a04b17d7690c007387f.png" alt="tabby"></p><p>填完信息后回车一下，稍等片刻，你就可以在页面下方看到已经同步的配置文件（profile）。你可以上传、写入、下载、覆盖或创建新的配置文件。同时，建议开启 Sync automatically 选项，让配置同步更加便捷。</p><p><img src="https://i-blog.csdnimg.cn/direct/2bd0d774a6f5479c9ec649a5983b0787.png" alt="tabby"></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2>]]></content>
      
      
      <categories>
          
          <category> 小玩具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> tabby </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
